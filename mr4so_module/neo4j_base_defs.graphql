## This is an (incomplete and not officially provided) schema file for the definitions of server-side
## directives, types, enums and scalars coming from the @neo4j/graphql library.
## This file is not used by the actual application, but it automatically parsed  by IDE GraphQL Plug-Ins
## and used to avoid syntax error highlighting when using these directives in the GraphQL schemas.

scalar _Any

scalar _FieldSet

directive @external on FIELD_DEFINITION

directive @jwt on OBJECT

directive @requires(
    fields: _FieldSet!
) on FIELD_DEFINITION

directive @provides(
    fields: _FieldSet!
) on FIELD_DEFINITION

directive @key(
    fields: _FieldSet!
) on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

enum CallbackOperation {
    CREATE
    UPDATE
}

"""Instructs @neo4j/graphql to invoke the specified callback function when updating or creating the properties on a node or relationship."""
directive @callback(
    """Which events to invoke the callback on."""
    operations: [CallbackOperation!]! = [CREATE, UPDATE]
    """The name of the callback function."""
    name: String!
) on FIELD_DEFINITION


"""
Int | Float | String | Boolean | ID | DateTime
"""
scalar Scalar

"""
Int | Float | String | Boolean | ID | DateTime | Enum
"""
scalar ScalarOrEnum

"""
Instructs @neo4j/graphql to wrap the property in a coalesce() function during queries, using the single value specified.
"""
directive @coalesce(
    """
    The value to use in the coalesce() function. Must be a scalar type and must match the type of the field with which this directive decorates.
    """
    value: Scalar!
) on FIELD_DEFINITION

directive @auth on OBJECT | FIELD_DEFINITION

enum NestedOperations {
    CREATE
    UPDATE
    DELETE
    CONNECT
    DISCONNECT
    CONNECT_OR_CREATE
}

directive @relationship(
    type: String!
    queryDirection: RelationshipQueryDirection! = DEFAULT_DIRECTED
    direction: RelationshipDirection!
    properties: String
    nestedOperations: [NestedOperations!]! = [CREATE, UPDATE, DELETE, CONNECT, DISCONNECT, CONNECT_OR_CREATE]
    aggregate: Boolean! = true
) on FIELD_DEFINITION

"""
Informs @neo4j/graphql that a field will be resolved by a custom resolver, and allows specification of any field dependencies.
"""
directive @computed(
    """
    Fields that the custom resolver will depend on.
    """
    from: [String!]
) on FIELD_DEFINITION

"""
Informs @neo4j/graphql that a field will be resolved by a custom resolver, and allows specification of any field dependencies.
"""
directive @customResolver(
    """
    Fields that the custom resolver will depend on.
    """
    requires: [String!]
) on FIELD_DEFINITION

"""
Instructs @neo4j/graphql to run the specified Cypher statement in order to resolve the value of the field to which the directive is applied.
"""
directive @cypher(
    """
    The Cypher statement to run which returns a value of the same type composition as the field definition on which the directive is applied.
    """
    statement: String!
    """
    The name of a node, relationship query or an alias in the RETURN statement of the Cypher statement.
    """
    columnName: String!
) on FIELD_DEFINITION

"""
Instructs @neo4j/graphql to set the specified value as the default value in the CreateInput type for the object type in which this directive is used.
"""
directive @default(
    """
    The default value to use. Must be a scalar type and must match the type of the field with which this directive decorates.
    """
    value: Scalar!
) on FIELD_DEFINITION


input FullTextInput{
    indexName: String
    queryName: String
    fields: [String]!
    name: String
}

"""
Informs @neo4j/graphql that there should be a fulltext index in the database, allows users to search by the index in the generated schema.
"""
directive @fulltext(
    indexes: [FullTextInput]!
) on OBJECT

"""Indicates that the field is an identifier for the object type."""
directive @id on FIELD_DEFINITION

"""
Instructs @neo4j/graphql to completely ignore a field definition, assuming that it will be fully accounted for by custom resolvers.
"""
directive @ignore on FIELD_DEFINITION

"""
Instructs @neo4j/graphql to only expose a field through the Neo4j GraphQL OGM.
"""
directive @private on FIELD_DEFINITION

"""Instructs @neo4j/graphql to generate this input field for mutation."""
directive @settable(onCreate: Boolean! = true, onUpdate: Boolean! = true) on FIELD_DEFINITION

"""
Indicates that the field is to be mapped to the underlying Neo4j under a different property name.
"""
directive @alias(
    property: String!
) on FIELD_DEFINITION

"""
Informs @neo4j/graphql of node metadata
"""
directive @node(
    """
    Map the GraphQL type to custom Neo4j node labels
    """
    labels: [String]
) on OBJECT

directive @plural(
    value: String!
) on OBJECT

enum PopulatedByOperation {
    CREATE
    UPDATE
}

"""Instructs @neo4j/graphql to invoke the specified callback function to populate the field when updating or creating the properties on a node or relationship."""
directive @populatedBy(
    """The name of the callback function."""
    callback: String!
    """Which events to invoke the callback on."""
    operations: [PopulatedByOperation!]! = [CREATE, UPDATE]
) on FIELD_DEFINITION


"""
The `@queryOptions` is to be used on nodes, where applied will inject values into a query such as the `limit`.
"""
directive @queryOptions(
    """
    If no limit argument is supplied on query will fallback to this value.
    """
    limit: Limit
) on OBJECT

directive @query(read: Boolean! = true, aggregate: Boolean! = false) on OBJECT | SCHEMA

enum MutationFields {
    CREATE
    UPDATE
    DELETE
}

directive @mutation(operations: [MutationFields!]! = [CREATE, UPDATE, DELETE]) on OBJECT | SCHEMA

enum SubscriptionFields {
    CREATE
    UPDATE
    DELETE
    CREATE_RELATIONSHIP
    DELETE_RELATIONSHIP
}

directive @subscription(operations: [SubscriptionFields!]! = [CREATE, UPDATE, DELETE, CREATE_RELATIONSHIP, DELETE_RELATIONSHIP]) on OBJECT | SCHEMA


"""
Syntactic sugar to help differentiate between types for relationship properties, and otherwise.
"""
directive @relationshipProperties on OBJECT
directive @declareRelationship on FIELD_DEFINITION

enum TimestampOperation {
    CREATE
    UPDATE
}

"""Instructs @neo4j/graphql to generate timestamps on particular events, which will be available as the value of the specified field."""
directive @timestamp(
    """Which events to generate timestamps on. Defaults to both create and update."""
    operations: [TimestampOperation!]! = [CREATE, UPDATE]
) on FIELD_DEFINITION

"""
Informs @neo4j/graphql that there should be a uniqueness constraint in the database for the decorated field.
"""
directive @unique(
    """
    The name which should be used for this constraint. By default; type name, followed by an underscore, followed by the field name.
    """
    constraintName: String
) on FIELD_DEFINITION

"""Instructs @neo4j/graphql to generate this field for selectable fields."""
directive @selectable(onRead: Boolean! = true, onAggregate: Boolean! = true) on FIELD_DEFINITION
enum RelationshipDirection{
    IN
    OUT
}

"""Instructs @neo4j/graphql to generate filters for this field."""
directive @filterable(byValue: Boolean! = true, byAggregate: Boolean! = true) on FIELD_DEFINITION


enum RelationshipQueryDirection{
    """
    All queries will be directed by default, but users may perform undirected queries.
    """
    DEFAULT_DIRECTED
    """
    All queries will be undirected by default, but users may perform directed queries.
    """
    DEFAULT_UNDIRECTED
    """
    Only directed queries can be perform on this relationship.
    """
    DIRECTED_ONLY
    """
    Only undirected queries can be perform on this relationship.
    """
    UNDIRECTED_ONLY
}

input Limit{
    default: Int
    max: Int
}

# neo4j-Specific Type Definitions
# ===============================

scalar BigInt
scalar Date
scalar Time
scalar LocalTime
scalar DateTime
scalar LocalDateTime
scalar Duration
scalar Point
scalar CartesianPoint

"""
A value which contains a value which directly references to a file.
"""
scalar FileReference

# TODO: Complete types